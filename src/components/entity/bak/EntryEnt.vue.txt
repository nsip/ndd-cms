<template>

    <div class="area-tabs">
        <button class="scroll-button prev" id="scrollLeftBtn" @click="prev_click" :disabled="leftHiddenCount == 0" :title="leftHiddenCount + ' hidden(s)'">&lt;</button>
        <div class="tab" id="tabs-container">
            <button v-for="(template, idx) in components" class="tab-links" :id="'tab-' + idx" @click="showTabContent(idx)" :hidden="!visTab(idx)"> {{ template.tab }}</button>
        </div>
        <button class="scroll-button next" id="scrollRightBtn" @click="next_click" :disabled="rightHiddenCount == 0" :title="rightHiddenCount + ' hidden(s)'">&gt;</button>
    </div>

    <div id="entry-ent">
        <template v-for="(template, idx) in components" class="tab-content">
            <component :is="template.com" v-if="visCom(idx)"> </component>
        </template>
    </div>

</template>

<script setup lang="ts">

import { checkOverflowVisibility } from "@/share/util";

import EntName from "@/components/entity/1_Name.vue";
import EntDef from "@/components/entity/2_Def.vue";
import EntSIF from "@/components/entity/3_SIF.vue";
import EntOtherStd from "@/components/entity/4_OtherStd.vue";
import EntLegalDef from "@/components/entity/5_LegalDef.vue";
import EntSensi from "@/components/entity/6_Sensi.vue"
import EntCol from "@/components/entity/7_Col.vue";
import EntMeta from "@/components/entity/8_Meta.vue";

const components = [
    { tab: "Entity", com: EntName },
    { tab: "Definition", com: EntDef },
    { tab: "SIF", com: EntSIF },
    { tab: "OtherStandards", com: EntOtherStd },
    { tab: "LegalDefinitions", com: EntLegalDef },
    { tab: "Sensitivity", com: EntSensi },
    { tab: "Collections", com: EntCol },
    { tab: "MetaData", com: EntMeta },
];

const getTabIdx = (tab: string) => {
    let idx = 0;
    components.forEach((e, i) => { if (e.tab == tab) { idx = i } })
    return idx
}
const curSelTabIdx = ref(0)
const curSelTab = computed(() => components[curSelTabIdx.value].tab)

const startIndex = ref(0);
const visTab = (idx: number) => { return idx >= startIndex.value; }
const visCom = (idx: number) => { return idx == curSelTabIdx.value; }
const leftHiddenCount = ref(0);
const rightHiddenCount = ref(0);

onMounted(async () => {
    await setSameWidth();
    await setDefaultTab("tab-0");
    updateBothHidden();
    window.addEventListener('resize', () => {
        updateBothHidden();
    })
})

const showTabContent = async (idx: number) => {

    // current selected tab index assignment
    curSelTabIdx.value = idx;

    // tab menu effect
    const tab_links = document.getElementsByClassName("tab-links");
    for (let i = 0; i < tab_links.length; i++) {
        tab_links[i].className = tab_links[i].className.replace(" active", "");
    }
    tab_links[curSelTabIdx.value].className += " active";
}

const setDefaultTab = async (id: string) => {
    const iid = window.setInterval(() => { document.getElementById(id)!.click(); }, 50)
    window.setTimeout(() => { window.clearInterval(iid) }, 1000)
}

const setSameWidth = async () => {

    const container = document.getElementById('tabs-container');
    const tabs = container?.querySelectorAll('.tab-links');

    let maxWidth = 0;
    tabs?.forEach(e => {
        const width = (e as HTMLElement).offsetWidth;
        if (width > maxWidth) {
            maxWidth = width;
        }
    })

    tabs?.forEach(e => {
        (e as HTMLElement).style.width = maxWidth + 'px';
    })
}

const getHiddenIndices = () => {
    const hIndices: number[] = [];
    (checkOverflowVisibility('tabs-container', 'tab-links')).forEach((ht) => {
        hIndices.push(getTabIdx(ht))
    })
    const left: number[] = [];
    for (let i = 0; i <= components.length - 1; i++) {
        if (hIndices.includes(i)) {
            left.push(i);
        } else {
            break
        }
    }
    const right: number[] = [];
    for (let i = components.length - 1; i >= 0; i--) {
        if (hIndices.includes(i)) {
            right.push(i);
        } else {
            break
        }
    }
    return [left, right];
}

const updateBothHidden = () => {
    const h = getHiddenIndices()
    leftHiddenCount.value = h[0].length
    rightHiddenCount.value = h[1].length
}

const next_click = async () => {
    if (rightHiddenCount.value == 0) {
        return
    }
    startIndex.value++;
    window.setTimeout(() => { updateBothHidden(); }, 200)
}

const prev_click = async () => {
    if (leftHiddenCount.value == 0) {
        return
    }
    startIndex.value--;
    window.setTimeout(() => { updateBothHidden(); }, 200)
}

</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.area-tabs {
    display: flex;
    /* justify-content: space-between; */
    background-color: #f1f1f1;
}

/* right most element keep right alignment */
.area-tabs div:nth-child(n) {
    margin-right: auto;
}

/* Style the tab */
.tab {
    overflow: hidden;
    border: 1px solid #ccc;
    background-color: #f1f1f1;
    height: 4vh;
}

/* Style the buttons inside the tab */
.tab button {
    background-color: inherit;
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    transition: 0.3s;
    font-size: 14px;
    height: 100%;
    font-style: italic;
    font-weight: bold;
    text-align: center;
}

/* Change background color of buttons on hover */
.tab button:hover {
    background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
    background-color: #ccc;
}

/* Style the tab content */
.tab-content {
    padding: 1px 1px;
    border: 1px solid #ccc;
    border-top: none;
}

#entry-ent {
    height: 87vh;
    overflow-y: scroll;
    scrollbar-width: none;
}

.scroll-button {
    position: relative;
    top: 0;
    bottom: 0;
    width: 40px;
    background-color: #e4eef3;
    border: none;
    cursor: pointer;
    outline: none;
}

.prev {
    width: 2.5vh;
    flex-shrink: 0;
    left: 0;
}

.next {
    width: 2.5vh;
    flex-shrink: 0;
    float: right;
}
</style>
